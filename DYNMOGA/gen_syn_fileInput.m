function [blogSize nbCluster fname]= gen_syn_fileInput(T,fileClasses,fileEdges)

%
% gen_syn_myfileInput.m reads the data sets generated by other
% generators, or available in the literature, and builds the data structure requested by Facetnet to run and 
% evaluate the methods 
%
%   inputs:
%       T: number of time steps, e.g., 10
%       fileClasses: name of the file containing the class label for each
%       node. Note that the name must be : fileClasses.t0i.comm1, where
%       i indicates the time step (see variable node_curr)
%       fileEdges: name of the file containing the edges constituting the
%       network. Note that the name must be : fileEdges.t0i.edges, where
%       i indicates the time step (see variable edges_curr)
%
%  
%



for i=1:T
    node_curr = [fileClasses '.t0' int2str(i) '.comm1']  
    
    gt = load(node_curr);
    blogSize= size(gt,1) %the numer of nodes is the size of the file gt 
    % that contains for each node, the label of the associated cluster
    nbCluster=max(gt(:,2))
    % the number of clusters is the max label value
    GT = zeros(blogSize,nbCluster);
    
    for j=1:blogSize
        node = gt(j,1);
        cluster = gt(j,2);
        if (node ~= 0)
          GT(node,cluster) = 1;
        end
    end
    GT_Cube{i} = GT
    
    
% W_Cube generation
edges_curr = [fileEdges '.t0' int2str(i) '.edges'] 
    
    %edges_curr = load(edges);
   
    W = edges2adj(edges_curr,blogSize);
    W_Cube{i} = W;
end

%generateGT_Matrix
GT_Matrix = zeros(blogSize, T);
numClass=[];
for i=1:nbCluster
    numClass=[numClass i];
end

for i=1:1:T
    
    GT_Matrix(:,i) = GT_Cube{i}*numClass';
end

fname = ['syn_T_' int2str(T) '_bS_' int2str(blogSize) '.mat'];

eval(['save ' fname  ' W_Cube GT_Cube GT_Matrix blogSize nbCluster T  -mat']);